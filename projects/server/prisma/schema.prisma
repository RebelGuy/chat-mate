// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// Persists access tokens for twitch authentication
model TwitchAuth {
  // there can only be one access token per client
  clientId String @id

  accessToken         String
  refreshToken        String
  expiresIn           Int
  obtainmentTimestamp BigInt
  scope               String

  @@map("twitch_auth")
}

// there is no notion of a "livestream" on twitch - all chat messages are sent to the channel directly.
// since we never run the twitch chat without the youtube chat, this does not present a problem as we can
// simply match all twitch messages with a youtube livestream.
model Livestream {
  id        Int       @id @default(autoincrement())
  liveId    String    @unique @db.VarChar(11)
  createdAt DateTime  @default(now())
  start     DateTime?
  end       DateTime?

  // for fetching the youtube chat of this livestream
  continuationToken String? @db.VarChar(1023)

  liveViewers            LiveViewers[]
  chatMessages           ChatMessage[]
  experienceTransactions ExperienceTransaction[]
  viewingBlocks          ViewingBlock[]

  @@map("livestreams")
}

model LiveViewers {
  id               Int      @id @default(autoincrement())
  time             DateTime @default(now())
  youtubeViewCount Int
  twitchViewCount  Int

  livestreamId Int
  livestream   Livestream @relation(fields: [livestreamId], references: [id])

  @@map("live_viewers")
}

/// USERS

model ChatUser {
  id Int @id @default(autoincrement())

  // the channels associated with the user
  youtubeChannels YoutubeChannel[]
  twitchChannels  TwitchChannel[]

  chatMessages               ChatMessage[]
  experienceTransactions     ExperienceTransaction[]
  experienceSnapshots        ExperienceSnapshot[]
  viewingBlocks              ViewingBlock[]
  experienceDataAdministered ExperienceDataAdmin[]

  @@map("chat_users")
}

model YoutubeChannelInfo {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  imageUrl    String  @db.VarChar(511)
  isOwner     Boolean
  isModerator Boolean
  isVerified  Boolean

  /// first seen with this info
  time DateTime

  channelId Int
  channel   YoutubeChannel @relation(fields: [channelId], references: [id])

  @@map("youtube_channel_info")
}

model YoutubeChannel {
  id        Int    @id @default(autoincrement())
  youtubeId String @unique @db.VarChar(63)

  userId Int
  user   ChatUser @relation(fields: [userId], references: [id])

  chatMessages ChatMessage[]
  infoHistory  YoutubeChannelInfo[]

  @@map("youtube_channels")
}

model TwitchChannelInfo {
  id Int @id @default(autoincrement())

  userName      String  @db.VarChar(64)
  displayName   String  @db.VarChar(64)
  userType      String  @db.VarChar(32)
  isBroadcaster Boolean
  isSubscriber  Boolean
  isMod         Boolean
  isVip         Boolean
  colour        String  @db.VarChar(8)

  /// first seen with this info
  time DateTime

  channelId Int
  channel   TwitchChannel @relation(fields: [channelId], references: [id])

  @@map("twitch_channel_info")
}

model TwitchChannel {
  id       Int    @id @default(autoincrement())
  twitchId String @db.VarChar(32)

  userId Int
  user   ChatUser @relation(fields: [userId], references: [id])

  chatMessages ChatMessage[]
  infoHistory  TwitchChannelInfo[]

  @@map("twitch_channels")
}

// CHAT

/// Unlike text, emoji objects are finite and can be re-used
model ChatEmoji {
  id          Int     @id @default(autoincrement())
  // twitch or youtube id
  externalId  String  @unique @db.VarChar(255)
  imageUrl    String? @db.VarChar(511)
  imageWidth  Int?    @db.SmallInt
  imageHeight Int?    @db.SmallInt
  name        String? @db.VarChar(127)
  label       String? @db.VarChar(127)

  // for youtube only - currently unused
  isCustomEmoji Boolean

  messageParts ChatMessagePart[]

  // any custom emojis that have replaced this YouTube emoji within a chat message
  customEmoji ChatCustomEmoji[]

  @@map("chat_emojis")
}

model ChatText {
  id        Int     @id @default(autoincrement())
  isBold    Boolean
  isItalics Boolean
  // YouTube imposes a chat message limit of 200 characters, and Twitch 500
  text      String  @db.VarChar(500)

  // technically messagePart should always be defined
  messagePart ChatMessagePart?

  // this text object may refer to a custom emoji
  customEmoji ChatCustomEmoji?

  @@map("chat_text")
}

model ChatCheer {
  id       Int    @id @default(autoincrement())
  amount   Int
  name     String @db.VarChar(64)
  colour   String @db.VarChar(8)
  imageUrl String @db.VarChar(512)

  // technically messagePart should always be defined
  messagePart ChatMessagePart?

  @@map("chat_cheers")
}

model ChatCustomEmoji {
  id Int @id @default(autoincrement())

  // keep the original objects in case the emoji symbol changes.
  textId Int?      @unique
  text   ChatText? @relation(fields: [textId], references: [id])

  emojiId Int?
  emoji   ChatEmoji? @relation(fields: [emojiId], references: [id])

  customEmojiId Int
  customEmoji   CustomEmoji @relation(fields: [customEmojiId], references: [id])

  ChatMessagePart ChatMessagePart[]

  @@map("chat_custom_emojis")
}

/// Has exactly one text, emoji, or cheer component attached, and possibly also a custom emoji.
model ChatMessagePart {
  id    Int @id @default(autoincrement())
  order Int

  chatMessageId Int
  chatMessage   ChatMessage @relation(fields: [chatMessageId], references: [id])

  textId Int?      @unique
  text   ChatText? @relation(fields: [textId], references: [id])

  emojiId Int?
  emoji   ChatEmoji? @relation(fields: [emojiId], references: [id])

  cheerId Int?       @unique
  cheer   ChatCheer? @relation(fields: [cheerId], references: [id])

  customEmojiId Int?
  customEmoji   ChatCustomEmoji? @relation(fields: [customEmojiId], references: [id])

  // all message parts of the chat message must have a different ordering
  @@unique([order, chatMessageId])
  @@map("chat_message_parts")
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  // youtube or twitch id
  externalId String   @unique @db.VarChar(255)
  time       DateTime

  userId Int
  user   ChatUser @relation(fields: [userId], references: [id])

  // keep track of which actual channel posted the message. must be one of the two mentioned here.
  // the userId above is simply a convenience and duplicates the below information.
  youtubeChannelId Int?
  youtubeChannel   YoutubeChannel? @relation(fields: [youtubeChannelId], references: [id])

  twitchChannelId Int?
  twitchChannel   TwitchChannel? @relation(fields: [twitchChannelId], references: [id])

  livestreamId Int
  livestream   Livestream @relation(fields: [livestreamId], references: [id])

  chatMessageParts ChatMessagePart[]

  experienceDataChatMessage ExperienceDataChatMessage?

  @@map("chat_messages")
}

// Experience

/// Holds individual changes in a person's experience.
model ExperienceTransaction {
  id    Int      @id @default(autoincrement())
  time  DateTime
  delta Int

  // Exactly one of the below experience data columns will always be defined,
  // depending on what kind of event triggered this transaction.
  experienceDataChatMessage ExperienceDataChatMessage?
  experienceDataAdmin       ExperienceDataAdmin?

  livestreamId Int
  livestream   Livestream @relation(fields: [livestreamId], references: [id])

  userId Int
  user   ChatUser @relation(fields: [userId], references: [id])

  @@map("experience_transactions")
}

/// Holds snapshots of a person's experience at certaint points in time.
model ExperienceSnapshot {
  id         Int      @id @default(autoincrement())
  time       DateTime
  experience Int

  userId Int
  user   ChatUser @relation(fields: [userId], references: [id])

  @@map("experience_snapshots")
}

/// Data for an experience transaction triggered by a chat message
model ExperienceDataChatMessage {
  id Int @id @default(autoincrement())

  baseExperience                Int
  viewershipStreakMultiplier    Float
  participationStreakMultiplier Float
  spamMultiplier                Float
  messageQualityMultiplier      Float
  repetitionPenalty             Float? // todo: add data migration (default value is 0) and make required

  chatMessageId Int         @unique
  chatMessage   ChatMessage @relation(fields: [chatMessageId], references: [id])

  experienceTransactionId Int                   @unique
  experienceTransaction   ExperienceTransaction @relation(fields: [experienceTransactionId], references: [id])

  @@map("experience_data_chat_message")
}

/// Data for an experience transaction triggered by an admin
model ExperienceDataAdmin {
  id Int @id @default(autoincrement())

  message String? @db.VarChar(1023)

  adminUserId Int
  adminUser   ChatUser @relation(fields: [adminUserId], references: [id])

  experienceTransactionId Int                   @unique
  experienceTransaction   ExperienceTransaction @relation(fields: [experienceTransactionId], references: [id])

  @@map("experience_data_admin")
}

/// Represents a continuous period of time in which a channel has been viewing a livestream.
model ViewingBlock {
  id Int @id @default(autoincrement())

  startTime  DateTime
  lastUpdate DateTime

  livestreamId Int
  livestream   Livestream @relation(fields: [livestreamId], references: [id])

  userId Int
  user   ChatUser @relation(fields: [userId], references: [id])

  @@map("viewing_blocks")
}

model CustomEmoji {
  id Int @id @default(autoincrement())

  symbol String @unique @db.VarChar(10)
  name   String @db.VarChar(63)

  // max 64KB of storage
  image Bytes @db.Blob

  levelRequirement Int @db.UnsignedSmallInt

  ChatCustomEmoji ChatCustomEmoji[]

  @@map("custom_emojis")
}
