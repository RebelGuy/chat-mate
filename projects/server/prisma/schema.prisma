// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// Persists access tokens for twitch authentication
model TwitchAuth {
  // there can only be one access token per client
  clientId String @id

  accessToken         String
  refreshToken        String
  expiresIn           Int
  obtainmentTimestamp BigInt
  scope               String

  @@map("twitch_auth")
}

model Livestream {
  id        Int       @id @default(autoincrement())
  liveId    String    @db.VarChar(11) // unique
  createdAt DateTime  @default(now())
  start     DateTime?
  end       DateTime?

  // for fetching the chat of this livestream
  continuationToken String? @db.VarChar(1023)

  liveViewers            LiveViewers[]
  chatMessages           ChatMessage[]
  experienceTransactions ExperienceTransaction[]
  viewingBlocks          ViewingBlock[]

  @@unique([liveId], map: "Livestream_liveId_key")
  @@map("livestream")
}

model LiveViewers {
  id        Int      @id @default(autoincrement())
  time      DateTime @default(now())
  viewCount Int

  livestreamId Int
  livestream   Livestream @relation(fields: [livestreamId], references: [id], map: "LiveViewers_livestreamId_fkey")

  @@index([livestreamId], map: "LiveViewers_livestreamId_fkey")
  @@map("liveviewers")
}

// for tracking history
model ChannelInfo {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  imageUrl    String  @db.VarChar(511)
  isOwner     Boolean
  isModerator Boolean
  IsVerified  Boolean

  /// first seen with this info
  time DateTime

  channelId Int
  channel   Channel @relation(fields: [channelId], references: [id], map: "channel_info_channelId_fkey")

  @@index([channelId], map: "channel_info_channelId_fkey")
  @@map("channel_info")
}

model Channel {
  id        Int    @id @default(autoincrement())
  youtubeId String @db.VarChar(63) // unique

  chatMessages               ChatMessage[]
  infoHistory                ChannelInfo[]
  experienceTransactions     ExperienceTransaction[]
  experienceSnapshots        ExperienceSnapshot[]
  viewingBlocks              ViewingBlock[]
  experienceDataAdministered ExperienceDataAdmin[]

  @@unique([youtubeId], map: "Channel_youtubeId_key")
  @@map("channel")
}

// CHAT

/// Unlike text, emoji objects are finite and can be re-used
model ChatEmoji {
  id            Int     @id @default(autoincrement())
  youtubeId     String  @db.VarChar(255) // unique
  imageUrl      String? @db.VarChar(511)
  imageWidth    Int?    @db.SmallInt
  imageHeight   Int?    @db.SmallInt
  name          String? @db.VarChar(127)
  label         String? @db.VarChar(127)
  isCustomEmoji Boolean

  messageParts ChatMessagePart[]

  // any custom emojis that have replaced this YouTube emoji within a chat message
  customEmoji ChatCustomEmoji[]

  @@unique([youtubeId], map: "chat_emoji_youtubeId_key")
  @@map("chat_emoji")
}

model ChatText {
  id        Int     @id @default(autoincrement())
  isBold    Boolean
  isItalics Boolean
  // YouTube imposes a chat message limit of 200 characters
  text      String  @db.VarChar(200)

  // technically messagePart should always be defined
  messagePart ChatMessagePart?

  // this text object may refer to a custom emoji
  customEmoji ChatCustomEmoji?

  @@map("chat_text")
}

model ChatCustomEmoji {
  id Int @id @default(autoincrement())

  // keep the original objects in case the emoji symbol changes.
  textId Int? // unique
  text   ChatText? @relation(fields: [textId], references: [id], map: "chat_custom_emoji_textId_fkey")

  emojiId Int?
  emoji   ChatEmoji? @relation(fields: [emojiId], references: [id], map: "chat_custom_emoji_emojiId_fkey")

  customEmojiId Int
  customEmoji   CustomEmoji @relation(fields: [customEmojiId], references: [id], map: "chat_custom_emoji_customEmojiId_fkey")

  ChatMessagePart ChatMessagePart[]

  @@unique([textId], map: "chat_custom_emoji_textId_key")
  @@index([emojiId], map: "chat_custom_emoji_emojiId_fkey")
  @@index([customEmojiId], map: "chat_custom_emoji_customEmojiId_fkey")
  @@map("chat_custom_emoji")
}

/// Has either a text or emoji component attached, but never none or both
model ChatMessagePart {
  id    Int @id @default(autoincrement())
  order Int // unique with `chatMessageId`

  chatMessageId Int // unique with `order`
  chatMessage   ChatMessage @relation(fields: [chatMessageId], references: [id], map: "chat_message_part_chatMessageId_fkey")

  textId Int? // unique
  text   ChatText? @relation(fields: [textId], references: [id], map: "chat_message_part_textId_fkey")

  emojiId Int?
  emoji   ChatEmoji? @relation(fields: [emojiId], references: [id], map: "chat_message_part_emojiId_fkey")

  customEmojiId Int?
  customEmoji   ChatCustomEmoji? @relation(fields: [customEmojiId], references: [id], map: "chat_message_part_customEmojiId_fkey")

  // all message parts of the chat message must have a different ordering
  @@unique([order, chatMessageId], map: "chat_message_part_order_chatMessageId_key")
  @@unique([textId], map: "chat_message_part_textId_key")
  @@index([chatMessageId], map: "chat_message_part_chatMessageId_fkey")
  @@index([emojiId], map: "chat_message_part_emojiId_fkey")
  @@index([customEmojiId], map: "chat_message_part_customEmojiId_fkey")
  @@map("chat_message_part")
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  youtubeId String   @db.VarChar(255) // unique
  time      DateTime

  channelId Int
  channel   Channel @relation(fields: [channelId], references: [id], map: "chat_message_channelId_fkey")

  livestreamId Int
  livestream   Livestream @relation(fields: [livestreamId], references: [id], map: "chat_message_livestreamId_fkey")

  chatMessageParts ChatMessagePart[]

  experienceDataChatMessage ExperienceDataChatMessage?

  @@unique([youtubeId], map: "chat_message_youtubeId_key")
  @@index([channelId], map: "chat_message_channelId_fkey")
  @@index([livestreamId], map: "chat_message_livestreamId_fkey")
  @@map("chat_message")
}

// Experience

/// Holds individual changes in a person's experience.
model ExperienceTransaction {
  id    Int      @id @default(autoincrement())
  time  DateTime
  delta Int

  // Exactly one of the below experience data columns will always be defined,
  // depending on what kind of event triggered this transaction.
  experienceDataChatMessage ExperienceDataChatMessage?
  experienceDataAdmin       ExperienceDataAdmin?

  livestreamId Int
  livestream   Livestream @relation(fields: [livestreamId], references: [id], map: "experience_transaction_livestreamId_fkey")

  channelId Int
  channel   Channel @relation(fields: [channelId], references: [id], map: "experience_transaction_channelId_fkey")

  @@index([livestreamId], map: "experience_transaction_livestreamId_fkey")
  @@index([channelId], map: "experience_transaction_channelId_fkey")
  @@map("experience_transaction")
}

/// Holds snapshots of a person's experience at certaint points in time.
model ExperienceSnapshot {
  id         Int      @id @default(autoincrement())
  time       DateTime
  experience Int

  channelId Int
  channel   Channel @relation(fields: [channelId], references: [id], map: "experience_snapshot_channelId_fkey")

  @@index([channelId], map: "experience_snapshot_channelId_fkey")
  @@map("experience_snapshot")
}

/// Data for an experience transaction triggered by a chat message
model ExperienceDataChatMessage {
  id Int @id @default(autoincrement())

  baseExperience                Int
  viewershipStreakMultiplier    Float
  participationStreakMultiplier Float
  spamMultiplier                Float
  messageQualityMultiplier      Float
  repetitionPenalty             Float? // todo: add data migration (default value is 0) and make required

  chatMessageId Int // unique
  chatMessage   ChatMessage @relation(fields: [chatMessageId], references: [id], map: "experience_data_chat_message_chatMessageId_fkey")

  experienceTransactionId Int // unique
  experienceTransaction   ExperienceTransaction @relation(fields: [experienceTransactionId], references: [id], map: "experience_data_chat_message_experienceTransactionId_fkey")

  @@unique([chatMessageId], map: "experience_data_chat_message_chatMessageId_key")
  @@unique([experienceTransactionId], map: "experience_data_chat_message_experienceTransactionId_key")
  @@map("experience_data_chat_message")
}

/// Data for an experience transaction triggered by an admin
model ExperienceDataAdmin {
  id Int @id @default(autoincrement())

  message String? @db.VarChar(1023)

  adminChannelId Int
  adminChannel   Channel @relation(fields: [adminChannelId], references: [id], map: "experience_data_admin_adminChannelId_fkey")

  experienceTransactionId Int // unique
  experienceTransaction   ExperienceTransaction @relation(fields: [experienceTransactionId], references: [id], map: "experience_data_admin_experienceTransactionId_fkey")

  @@unique([experienceTransactionId], map: "experience_data_admin_experienceTransactionId_key")
  @@index([adminChannelId], map: "experience_data_admin_adminChannelId_fkey")
  @@map("experience_data_admin")
}

/// Represents a continuous period of time in which a channel has been viewing a livestream.
model ViewingBlock {
  id Int @id @default(autoincrement())

  startTime  DateTime
  lastUpdate DateTime

  livestreamId Int
  livestream   Livestream @relation(fields: [livestreamId], references: [id], map: "viewing_block_livestreamId_fkey")

  channelId Int
  channel   Channel @relation(fields: [channelId], references: [id], map: "viewing_block_channelId_fkey")

  @@index([livestreamId], map: "viewing_block_livestreamId_fkey")
  @@index([channelId], map: "viewing_block_channelId_fkey")
  @@map("viewing_block")
}

model CustomEmoji {
  id Int @id @default(autoincrement())

  symbol String @db.VarChar(10)
  name   String @db.VarChar(63)

  // max 64KB of storage
  image Bytes @db.Blob

  levelRequirement Int @db.UnsignedSmallInt

  ChatCustomEmoji ChatCustomEmoji[]

  @@unique([symbol], map: "CustomEmoji_symbol_key")
  @@map("customemoji")
}
